generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int      @id @default(autoincrement())
  first_name    String
  last_name     String
  email         String   @unique
  phone_number  String?
  password_hash String
  role          String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  addresses           Address[]
  orders              Order[]
  reviews             Review[] // Assumes Review model will be added
  managed_restaurants Restaurant[] @relation("RestaurantOwner")
  driver_profile      Driver?

  @@map("users")
}

model Address {
  address_id      Int      @id @default(autoincrement())
  street_address1 String
  street_address2 String?
  city            String
  state_province  String?
  postal_code     String?
  country         String
  latitude        Float?
  longitude       Float?
  address_label   String?
  is_primary      Boolean? @default(false)

  user_id       Int?
  restaurant_id Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user             User?       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade) // If User deleted, delete Address
  restaurant       Restaurant? @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Restrict, onUpdate: Cascade) // Prevent Restaurant delete if Addresses exist
  orders_delivered Order[]     @relation("DeliveryAddress")

  @@map("addresses")
}

model Order {
  order_id            Int  @id @default(autoincrement())
  user_id             Int
  restaurant_id       Int // <<-- CORRECTED: Added _id, assume type Int matches Restaurant PK
  driver_id           Int?
  delivery_address_id Int

  total_amount            Decimal // Add @db.Decimal(10, 2) if needed
  status                  String
  special_instructions    String?
  estimated_delivery_time DateTime?
  actual_delivery_time    DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user             User       @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Cascade) // Prevent User delete if Orders exist
  restaurant       Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Restrict, onUpdate: Cascade) // Prevent Restaurant delete if Orders exist
  driver           Driver?    @relation(fields: [driver_id], references: [driver_id], onDelete: SetNull, onUpdate: Cascade) // Set driver_id=NULL if Driver deleted
  delivery_address Address    @relation("DeliveryAddress", fields: [delivery_address_id], references: [address_id], onDelete: Restrict, onUpdate: Cascade) // Prevent Address delete if used in Orders

  items   OrderItem[] // Relation field for OrderItems
  payment Payment? // Relation field for Payment

  @@map("orders")
}

model Driver {
  driver_id             Int       @id @default(autoincrement())
  user_id               Int       @unique // Enforces 1-to-1
  vehicle_type          String?
  vehicle_license_plate String?
  vehicle_details       String?
  current_latitude      Float?
  current_longitude     Float?
  last_location_update  DateTime?
  availability_status   String
  average_rating        Float?
  is_approved           Boolean   @default(false)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  user            User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade) // If User deleted, delete Driver profile
  assigned_orders Order[]

  @@map("drivers")
}

model OrderItem {
  order_item_id Int @id @default(autoincrement())
  order_id      Int
  item_id       Int

  quantity             Int
  price_at_order_time  Decimal
  subtotal             Decimal
  special_instructions String?

  order     Order    @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: Cascade)
  menu_item MenuItem @relation(fields: [item_id], references: [item_id], onDelete: Restrict, onUpdate: Cascade)

  @@map("order_items")
}

model Payment {
  payment_id Int @id @default(autoincrement())
  order_id   Int @unique

  amount         Decimal
  payment_method String
  payment_status String
  transaction_id String?
  metadata       Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relationship

  order Order @relation(fields: [order_id], references: [order_id])

  @@map("payments")
}

model Restaurant {
  restaurant_id Int  @id @default(autoincrement())
  owner_user_id Int?

  name                 String
  description          String?
  cuisine_type         String?
  logo_image_url       String?
  header_image_url     String?
  average_rating       Float?
  price_range          String?
  operating_hours_info Json?
  contact_phone        String?
  contact_email        String?
  is_active            Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner User? @relation("RestaurantOwner", fields: [owner_user_id], references: [user_id], onDelete: SetNull, onUpdate: Cascade)

  menus      Menu[]
  menu_items MenuItem[]
  orders     Order[]
  addresses  Address[]
  reviews    Review[]

  @@map("restaurants")
}

model Menu {
  menu_id       Int @id @default(autoincrement())
  restaurant_id Int

  name              String
  description       String?
  is_active         Boolean   @default(true)
  active_start_time DateTime?
  active_end_time   DateTime?
  active_days       String[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relations

  restaurant    Restaurant     @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: Cascade)
  menu_contents Menu_Content[]

  @@map("menus")
}

model Menu_Content {
  menu_id Int
  item_id Int

  display_order      Int?
  price_override     Decimal?
  is_visible_on_menu Boolean  @default(true)

  //Relationships

  menu      Menu     @relation(fields: [menu_id], references: [menu_id], onDelete: Cascade, onUpdate: Cascade)
  menu_item MenuItem @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([menu_id, item_id])
  @@map("menu_contents")
}

model MenuItem {
  item_id       Int @id @default(autoincrement())
  restaurant_id Int

  name         String
  description  String?
  price        Decimal
  category     String?
  image_url    String?
  is_available Boolean  @default(true)
  tags         String[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // --- Relationships ---

  restaurant       Restaurant     @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: Cascade)
  menu_assignments Menu_Content[]
  order_items      OrderItem[]

  @@map("menu_items")
}

model Review {
  review_id     Int @id @default(autoincrement())
  user_id       Int
  restaurant_id Int

  rating  Int
  comment String?

  is_approved Boolean?
  reply_text  String?
  replied_at  DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // relationships
  user       User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  restaurant Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: Cascade)

  // Enforce that each user can only review a specific restaurant once
  @@unique([user_id, restaurant_id]) // <<-- UNCOMMENT THIS LINE
  @@map("reviews")
}
