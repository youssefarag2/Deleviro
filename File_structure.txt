food-delivery-backend/
├── dist/                    # Compiled TypeScript output (usually not committed)
├── node_modules/            # Project dependencies (usually not committed)
├── src/                     # Main source code directory (TypeScript files)
│   ├── app.ts               # Express app setup, global middleware, mounting module routes
│   ├── server.ts            # HTTP server creation and listening logic (imports app)
│   │
│   ├── config/              # Configuration loading and management
│   │   ├── index.ts         # Exports consolidated configuration object
│   │   ├── environment.ts   # Loads and validates environment variables (from .env)
│   │   ├── database.config.ts # Specific DB connection details
│   │   └── server.config.ts   # Server port, CORS settings, etc.
│   │
│   ├── database/            # Database connection, migrations, seeds
│   │   ├── connect.ts       # Logic to establish DB connection (e.g., TypeORM, pg pool)
│   │   ├── migrations/      # Migration files (generated by ORM or migration tool)
│   │   └── seeds/           # (Optional) Seed files for initial data
│   │
│   ├── modules/             # === CORE FEATURE MODULES ===
│   │   ├── auth/            # Authentication Logic
│   │   │   ├── auth.routes.ts      # Defines /auth/register, /auth/login routes
│   │   │   ├── auth.controller.ts  # Handles request/response for auth routes
│   │   │   ├── auth.service.ts     # Handles hashing, token generation, user lookup via UserService
│   │   │   └── dtos/               # Data Transfer Objects for auth requests
│   │   │       └── login.dto.ts
│   │   │       └── register.dto.ts
│   │   │
│   │   ├── users/           # User Management (Profile, Addresses)
│   │   │   ├── users.routes.ts
│   │   │   ├── users.controller.ts
│   │   │   ├── users.service.ts
│   │   │   ├── users.repository.ts # User-specific data access logic
│   │   │   ├── user.entity.ts      # User DB entity definition (e.g., TypeORM class)
│   │   │   ├── address.entity.ts   # Address DB entity definition
│   │   │   └── dtos/
│   │   │       └── create-address.dto.ts
│   │   │       └── update-user.dto.ts
│   │   │
│   │   ├── restaurants/     # Restaurants, Menus, Items
│   │   │   ├── restaurants.routes.ts
│   │   │   ├── restaurants.controller.ts
│   │   │   ├── restaurants.service.ts
│   │   │   ├── restaurants.repository.ts # Repository for Restaurant, Menu, MenuItem etc.
│   │   │   ├── restaurant.entity.ts
│   │   │   ├── menu.entity.ts
│   │   │   ├── menu-item.entity.ts
│   │   │   ├── menu-content.entity.ts
│   │   │   └── dtos/
│   │   │       └── query-restaurants.dto.ts
│   │   │
│   │   ├── orders/          # Order Management
│   │   │   ├── orders.routes.ts
│   │   │   ├── orders.controller.ts
│   │   │   ├── orders.service.ts
│   │   │   ├── orders.repository.ts
│   │   │   ├── order.entity.ts
│   │   │   ├── order-item.entity.ts
│   │   │   └── dtos/
│   │   │       └── create-order.dto.ts
│   │   │
│   │   ├── payments/        # Payment Processing / Webhooks
│   │   │   ├── payments.routes.ts   # (Likely just for webhooks)
│   │   │   ├── payments.controller.ts
│   │   │   ├── payments.service.ts
│   │   │   ├── payments.repository.ts
│   │   │   ├── payment.entity.ts
│   │   │   └── dtos/
│   │   │
│   │   ├── reviews/         # Restaurant Reviews
│   │   │   ├── reviews.routes.ts
│   │   │   ├── reviews.controller.ts
│   │   │   ├── reviews.service.ts
│   │   │   ├── reviews.repository.ts
│   │   │   ├── review.entity.ts
│   │   │   └── dtos/
│   │   │       └── create-review.dto.ts
│   │   │
│   │   └── drivers/         # Driver Management & Actions
│   │       ├── drivers.routes.ts
│   │       ├── drivers.controller.ts
│   │       ├── drivers.service.ts
│   │       ├── drivers.repository.ts
│   │       ├── driver.entity.ts
│   │       └── dtos/
│   │           └── update-location.dto.ts
│   │
│   ├── middleware/          # Shared Express Middleware
│   │   ├── auth.guard.ts       # Protects routes, verifies JWT
│   │   ├── error.handler.ts    # Global error handling logic
│   │   ├── notfound.handler.ts # Handles 404 routes
│   │   └── request.validator.ts # Validates request bodies/params using DTOs (e.g., with class-validator)
│   │
│   ├── utils/               # Common utilities (logger, helpers, constants, etc.)
│   │   ├── logger.ts
│   │   └── constants.ts
│   │
│   └── interfaces/          # Shared TypeScript interfaces (if needed)
│
├── tests/                   # Automated tests (unit, integration, e2e)
│   ├── __mocks__/
│   ├── integration/
│   └── unit/
│
├── .env                     # Local environment variables (ignored by Git)
├── .env.example             # Template for environment variables
├── .eslintignore
├── .eslintrc.js             # ESLint config
├── .gitignore
├── .prettierrc.js           # Prettier config
├── docker-compose.yml       # Defines services (app, postgres db) for Docker
├── Dockerfile               # Instructions to build the Node.js app Docker image
├── package.json             # Node.js project manifest
├── tsconfig.json            # TypeScript compiler options
└── README.md                # Project documentation